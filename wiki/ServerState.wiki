#summary Class definition

Back to: ForDevelopers

{{{
class ServerState(object):
    """Defines a class which records the current server state
       and produces logs, and a text attribute for a gui"""

    def __init__(self, cfgdict, serving=False):
        """Creates a class which defines the state of the server
           serving = True if the server is to start up listenning
           Subsequently setting the serving attribute turns on
           and off the server.
           cfgdict is a dictionary read from the config file
             tftprootfolder  - path to a folder
             logfolder       - path to a folder
             anyclient       - 1 if any client can call, 0 if only from a specific subnet
             clientipaddress - specific subnet ip address of the client
             clientmask      - specific subnet mask of the client
             listenport      - tftp port to listen on
             listenipaddress - address to listen on"""
        # set attributes from the dictionary, use assert to ensure
        # all attributes are present
        assert self.set_from_config_dict(cfgdict)

        self.serving = serving
        self.engine_available = True

        # The attribute self.text is read by the gui at regular intervals
        # and displayed to give server status messages
        self.text = """TFTPgui - a free tftp Server

Version\t:  TFTPgui 2.1
Author\t:  Bernard Czenkusz
Web site\t:  www.skipole.co.uk
License\t:  GPLv3

"""
        if serving:
            self.text += "Press Stop to disable the tftp server"
        else:
            self.text += "Press Start to enable the tftp server"

        # create logger
        self.logging_enabled = True
        try:
            # Dont want a logging failure to stop the server
            self.rootLogger = logging.getLogger('')
            self.rootLogger.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
            logfile=os.path.join(self.logfolder,"tftplog")
            self.loghandler = logging.handlers.RotatingFileHandler(logfile,
                                                    maxBytes=20000, backupCount=5)
            self.loghandler.setFormatter(formatter)
            self.rootLogger.addHandler(self.loghandler)
        except Exception:
            self.logging_enabled = False

    def log_exception(self, e):
        "Used to log exceptions"
        if self.logging_enabled:
            try:
                logging.exception(e)
            except Exception:
                self.logging_enabled = False

    def add_text(self, text_line, clear=False):
        """Adds text_line to the log, and also to self.text,
           which is used by the gui interface - adds the line to
           the text, keeping a maximum of 12 lines.
           If clear is True, deletes previous lines, making text
           equal to this text_line only"""

        if len(text_line)>100:
            # limit to 100 characters
            text_line = text_line[:100]
        # strip non-printable characters, as this is to be displayed on screen
        text_line = ''.join([char for char in text_line if char in string.printable])

        if self.logging_enabled:
            try:
                logging.info(text_line)
            except Exception:
                self.logging_enabled = False

        if clear:
            self.text = text_line
            return
        text_list = self.text.splitlines()
        if not text_list:
            self.text = text_line
            return
        if len(text_list) > 12:
            # remove first line
            text_list.pop(0)
        text_list.append(text_line)
        self.text = "\n".join(text_list)

    def get_connections(self):
        "If connections are needed, they are available via this method"
        return CONNECTIONS

    def get_config_dict(self):
        "Returns a dictionary of the config attributes"
        cfgdict = { "tftprootfolder":self.tftprootfolder,
                    "logfolder":self.logfolder,
                    "anyclient":self.anyclient,
                    "clientipaddress":self.clientipaddress,
                    "clientmask":self.clientmask,
                    "listenport":self.listenport,
                    "listenipaddress":self.listenipaddress}
        return cfgdict

    def set_from_config_dict(self, cfgdict):
        """Sets attributes from a given dictionary
           Returns True if all attributes supplied, or False if not"""
        all_attributes = True
        if "logfolder" in cfgdict:
            self.logfolder = cfgdict["logfolder"]
        else:
            all_attributes = False
        if "tftprootfolder" in cfgdict:
            self.tftprootfolder = cfgdict["tftprootfolder"]
        else:
            all_attributes = False
        if "anyclient" in cfgdict:
            self.anyclient = cfgdict["anyclient"]
        else:
            all_attributes = False
        if "clientipaddress" in cfgdict:
            self.clientipaddress = cfgdict["clientipaddress"]
        else:
            all_attributes = False
        if "clientmask" in cfgdict:
            self.clientmask = cfgdict["clientmask"]
        else:
            all_attributes = False
        if "listenport" in cfgdict:
            self.listenport = cfgdict["listenport"]
        if "listenipaddress" in cfgdict:
            if cfgdict["listenipaddress"] == "0.0.0.0":
                self.listenipaddress = ""
            else:
                self.listenipaddress = cfgdict["listenipaddress"]
        else:
            all_attributes = False
        return all_attributes

    def shutdown(self):
        "Shuts down the server"
        self.serving = False
        self.engine_available = False

}}}

Back to: ForDevelopers